# -*- coding: utf-8 -*-
"""final_code_for_As2_0410.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12FDO7PAfZ6azSF-kI3tWqrKDjwriE4Vz
"""

import pandas as pd
from sklearn.impute import KNNImputer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,confusion_matrix
from sklearn import preprocessing

from sklearn.metrics import roc_auc_score

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
import xgboost as xgb
from sklearn import preprocessing

#load data
X = pd.read_csv('/content/sph_dynamic.csv')
Y=pd.read_csv(r"/content/sph_static.csv")
Y_total=pd.read_csv(r"/content/sph_static_final.csv")
'''
X.head()
len(X)
X.isna().sum()
'''
drop_column = ['total_protein','heart_rate','sbp','dbp','mbp','resp_rate','temperature','bilirubin_direct','bilirubin_indirect',
              'ph','lactate','urineoutput','sofa_respiration','sofa_coagulation','sofa_liver','sofa_cardiovascular','sofa_cns',
              'sofa_renal']
drop_column1=['icu_intime','vent_start','vent_end']
new_dynmaic = X.drop(columns = drop_column)
new_dynmaic.head()


#data merge
Xset=new_dynmaic.groupby('stay_id').mean()
Yset=Y_total.drop(columns=drop_column1)
data0=pd.merge(Xset,Yset,on='stay_id')

#difinite features and target
target=pd.DataFrame(data0['vent_duration'])
target6=pd.DataFrame(data0['vent_duration_group_in_hours_3_day'])
targetd=pd.DataFrame(data0['vent_duration_group_in_days'])
features=data0.drop(columns=['vent_duration','stay_id','vent_duration_group_in_days','vent_duration_group_in_hours_3_day'])

#impute and scale
Xc=features.columns

imputer = KNNImputer(n_neighbors=6, weights='uniform', metric='nan_euclidean')
#features=imputer.fit_transform(features)
features =features.fillna(features.mean())
features=pd.DataFrame(preprocessing.normalize(features))

target=target.fillna(target.mean())

#features= pd.DataFrame(KNN(k=6).fit_transform(features)) 
features.columns=Xc

#split dataset
trainX, testX, trainY, testY = train_test_split(features, target, random_state=3, test_size=0.2)
trainX6, testX6, trainY6, testY6 = train_test_split(features, target6, random_state=3, test_size=0.2)
trainXd, testXd, trainYd, testYd = train_test_split(features, targetd, random_state=3, test_size=0.2)


#build up the model
models = {
    "linear":LinearRegression(),
    "dtr": DecisionTreeRegressor(),
    "rfr": RandomForestRegressor(),
    "svr": SVR(),
    "xgbr": xgb.XGBRegressor(n_estimators=1000, learning_rate=0.01, max_depth=2)
}

drop_column = ['total_protein','heart_rate','sbp','dbp','mbp','resp_rate','temperature','bilirubin_direct','bilirubin_indirect',
              'ph','lactate','urineoutput','sofa_respiration','sofa_coagulation','sofa_liver','sofa_cardiovascular','sofa_cns',
              'sofa_renal']
for i in drop_column:
    heart=X[['stay_id',i]]
    heart_new=heart.groupby('stay_id').mean()
    print(len(Yset)-heart_new.isna().sum())

heart1=X[['stay_id','heart_rate','resp_rate']]

#consider to add heart_rate and resp_rate in (which has medical relation with inbutation time)
heart_res=heart1.dropna()
#heart_res.head()
#heart_res.info()
data2=pd.merge(data0,heart_res,on='stay_id')
target_new=pd.DataFrame(data2['vent_duration'])
target_new6=pd.DataFrame(data2['vent_duration_group_in_hours_3_day'])
target_newd=pd.DataFrame(data2['vent_duration_group_in_days'])
#features_new=pd.DataFrame(data2['calcium','creatinine','glucose','sodium','chloride','hemoglobin','wbc','alt','ast','alp','bilirubin_total','pt','heart_rate','resp_rate'])
features_new= data2.drop(columns=['vent_duration','stay_id','vent_duration_group_in_days','vent_duration_group_in_hours_3_day'])
features_new.info()

#impute
Xc1=features_new.columns

imputer = KNNImputer(n_neighbors=6, weights='uniform', metric='nan_euclidean')
#features_new=imputer.fit_transform(features_new) 

features_new =features_new.fillna(features_new.mean())
features_new=pd.DataFrame(preprocessing.normalize(features_new))
features_new.columns=Xc1
features_new.info()
#split dataset
trainX_new, testX_new, trainY_new, testY_new = train_test_split(features_new, target_new, random_state=3, test_size=0.2)
trainX_new6, testX_new6, trainY_new6, testY_new6 = train_test_split(features_new, target_new6, random_state=3, test_size=0.2)
trainX_newd, testX_newd, trainY_newd, testY_newd = train_test_split(features_new, target_newd, random_state=3, test_size=0.2)

#LinearRegression G1
model = models['linear']
model.fit(trainX, trainY)
y_pred = model.predict(testX)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY, y_pred))) 

import matplotlib.pyplot as plt  

testY.reset_index(drop=True, inplace=True)

plt.plot(testY,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
# Calculate RMSE
rmse = np.sqrt(metrics.mean_squared_error(testY, y_pred))

# Calculate R-squared
r2 = r2_score(testY, y_pred)

# Calculate MAE
mae = mean_absolute_error(testY, y_pred)

print("RMSE:", rmse)
print("R-squared:", r2)
print("MAE:", mae)

#LinearRegression 6 hr G2
model = models['linear']
model.fit(trainX6, trainY6)
y_pred6 = model.predict(testX6)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY6, y_pred6))) 

import matplotlib.pyplot as plt  

testY6.reset_index(drop=True, inplace=True)

plt.plot(testY6,color="r",label="acc") 
 
plt.plot(y_pred6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
# Calculate RMSE
rmse = np.sqrt(metrics.mean_squared_error(testY6, y_pred6))

# Calculate R-squared
r2 = r2_score(testY6, y_pred6)

# Calculate MAE
mae = mean_absolute_error(testY6, y_pred6)

print("RMSE:", rmse)
print("R-squared:", r2)
print("MAE:", mae)

#LinearRegression d G3
model = models['linear']
model.fit(trainXd, trainYd)
y_pred_d = model.predict(testXd)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testYd, y_pred_d))) 

import matplotlib.pyplot as plt  

testYd.reset_index(drop=True, inplace=True)

plt.plot(testYd,color="r",label="acc") 
 
plt.plot(y_pred_d,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
# Calculate RMSE
rmse = np.sqrt(metrics.mean_squared_error(testYd, y_pred_d))

# Calculate R-squared
r2 = r2_score(testYd, y_pred_d)

# Calculate MAE
mae = mean_absolute_error(testYd, y_pred_d)

print("RMSE:", rmse)
print("R-squared:", r2)
print("MAE:", mae)

#LinearRegression (add the heart_rate and resp_rate) G4
model = models['linear']
model.fit(trainX_new, trainY_new)
y_pred = model.predict(testX_new)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY_new, y_pred))) 

import matplotlib.pyplot as plt  

testY_new.reset_index(drop=True, inplace=True)

plt.plot(testY_new,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#LinearRegression (add the heart_rate and resp_rate) 6-hours G5
model = models['linear']
model.fit(trainX_new6, trainY_new6)
y_pred6 = model.predict(testX_new6)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY_new6, y_pred6))) 

import matplotlib.pyplot as plt  

testY_new6.reset_index(drop=True, inplace=True)

plt.plot(testY_new6,color="r",label="acc") 
 
plt.plot(y_pred6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#LinearRegression (add the heart_rate and resp_rate) G6
model = models['linear']
model.fit(trainX_newd, trainY_newd)
y_predd = model.predict(testX_newd)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY_newd, y_predd))) 

import matplotlib.pyplot as plt  

testY_newd.reset_index(drop=True, inplace=True)

plt.plot(testY_newd,color="r",label="acc") 
 
plt.plot(y_predd,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#DecisionTreeRegressor G1
model = models['dtr']
model.fit(trainX, trainY)
y_pred = model.predict(testX)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY, y_pred))) 

import matplotlib.pyplot as plt  

testY.reset_index(drop=True, inplace=True)

plt.plot(testY,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#DecisionTreeRegressor 6 hr G2
model = models['dtr']
model.fit(trainX6, trainY6)
y_pred6 = model.predict(testX6)
y_pred6=np.clip(y_pred6,a_min=1,a_max=13)

from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY6, y_pred6))) 

import matplotlib.pyplot as plt  

testY6.reset_index(drop=True, inplace=True)

plt.plot(y_pred6,color=(0,0,0),label="pre")
plt.plot(testY6,color="r",label="acc") 
 
 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#DecisionTreeRegressor d G3
model = models['dtr']
model.fit(trainXd, trainYd)
y_pred_d = model.predict(testXd)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testYd, y_pred_d))) 

import matplotlib.pyplot as plt  

testYd.reset_index(drop=True, inplace=True)

plt.plot(testYd,color="r",label="acc") 
 
plt.plot(y_pred_d,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#Decisiontree Regression(add heart_rate and resp_rate) G4
model = models['dtr']
model.fit(trainX_new, trainY_new)
y_pred = model.predict(testX_new)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY_new, y_pred))) 

import matplotlib.pyplot as plt  

testY_new.reset_index(drop=True, inplace=True)

plt.plot(testY_new,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#Decisiontree Regression(add heart_rate and resp_rate) 6 G5
model = models['dtr']
model.fit(trainX_new6, trainY_new6)
y_pred6 = model.predict(testX_new6)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY_new6, y_pred6))) 

import matplotlib.pyplot as plt  

testY_new6.reset_index(drop=True, inplace=True)

plt.plot(testY_new6,color="r",label="acc") 
 
plt.plot(y_pred6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#Decisiontree Regression(add heart_rate and resp_rate) d G6
model = models['dtr']
model.fit(trainX_newd, trainY_newd)
y_pred = model.predict(testX_newd)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY_newd, y_predd))) 

import matplotlib.pyplot as plt  

testY_newd.reset_index(drop=True, inplace=True)

plt.plot(testY_newd,color="r",label="acc") 
 
plt.plot(y_predd,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#Xgboost Regression G1
model = models['xgbr']
model.fit(trainX, trainY)
y_pred = model.predict(testX)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY, y_pred))) 

import matplotlib.pyplot as plt  

testY.reset_index(drop=True, inplace=True)

plt.plot(testY,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#Xgboost Regression 6 G2
model = models['xgbr']
model.fit(trainX6, trainY6)
y_pred6 = model.predict(testX6)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY6, y_pred6))) 

import matplotlib.pyplot as plt  

testY6.reset_index(drop=True, inplace=True)

plt.plot(testY6,color="r",label="acc") 
 
plt.plot(y_pred6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#Xgboost Regression d G3
model = models['xgbr']
model.fit(trainXd, trainYd)
y_pred_d = model.predict(testXd)

y_pred_d=np.clip(y_pred_d,a_min=1,a_max=4)
from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testYd, y_pred_d))) 

import matplotlib.pyplot as plt  

testYd.reset_index(drop=True, inplace=True)

plt.plot(testYd,color="r",label="acc") 
 
plt.plot(y_pred_d,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#Xgboost Regression(add heart_rate and resp_rate) G4
model = models['xgbr']
model.fit(trainX_new, trainY_new)
y_pred = model.predict(testX_new)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY_new, y_pred))) 

import matplotlib.pyplot as plt  

testY_new.reset_index(drop=True, inplace=True)

plt.plot(testY_new,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#Xgboost Regression(add heart_rate and resp_rate) 6 G5
model = models['xgbr']
model.fit(trainX_new6, trainY_new6)
y_pred6 = model.predict(testX_new6)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY_new6, y_pred6))) 

import matplotlib.pyplot as plt  

testY_new6.reset_index(drop=True, inplace=True)

plt.plot(testY_new6,color="r",label="acc") 
 
plt.plot(y_pred6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

#Xgboost Regression(add heart_rate and resp_rate) d G6
model = models['xgbr']
model.fit(trainX_newd, trainY_newd)
y_predd = model.predict(testX_newd)


from sklearn import metrics

# RMSE
print("the RMSE is:")
print(np.sqrt(metrics.mean_squared_error(testY_newd, y_predd))) 

import matplotlib.pyplot as plt  

testY_newd.reset_index(drop=True, inplace=True)

plt.plot(testY_newd,color="r",label="acc") 
 
plt.plot(y_predd,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

## lgb G1
import json
import lightgbm as lgb
import pandas as pd
from sklearn.metrics import mean_squared_error



lgb_train = lgb.Dataset(trainX, trainY)
lgb_eval = lgb.Dataset(testX, testY, reference=lgb_train)

params = {
    'task': 'predict',
    'boosting_type': 'rf',
    'objective': 'rmse',
    'metric': {'l2', 'rmse'},
    'num_leaves': 100,
    'learning_rate': 0.01,
    'feature_fraction': 0.9,
    'bagging_fraction': 0.8,
    'bagging_freq': 10,
    'verbose': 0
}
print('...')
## train
gbm = lgb.train(params,
                lgb_train,
                num_boost_round=20,
                valid_sets=lgb_eval,
                early_stopping_rounds=5)
'''
## 保存模型
print('保存模型...')
## 保存模型到文件中
gbm.save_model('model.txt')
'''
print('predicting...')
## 预测
y_pred = gbm.predict(testX, num_iteration=gbm.best_iteration)
## 评估
print('rmse:')
print(mean_squared_error(testY, y_pred) ** 0.5)

import matplotlib.pyplot as plt  

testY.reset_index(drop=True, inplace=True)

plt.plot(testY,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

## lgb 6 G2
import json
import lightgbm as lgb
import pandas as pd
from sklearn.metrics import mean_squared_error



lgb_train = lgb.Dataset(trainX6, trainY6)
lgb_eval = lgb.Dataset(testX6, testY6, reference=lgb_train)

params = {
    'task': 'predict',
    'boosting_type': 'rf',
    'objective': 'rmse',
    'metric': {'l2', 'rmse'},
    'num_leaves': 100,
    'learning_rate': 0.01,
    'feature_fraction': 0.9,
    'bagging_fraction': 0.8,
    'bagging_freq': 10,
    'verbose': 0
}
print('...')
## train
gbm = lgb.train(params,
                lgb_train,
                num_boost_round=20,
                valid_sets=lgb_eval,
                early_stopping_rounds=5)
'''
## 保存模型
print('保存模型...')
## 保存模型到文件中
gbm.save_model('model.txt')
'''
print('predicting...')
## 预测
y_pred6 = gbm.predict(testX6, num_iteration=gbm.best_iteration)
## 评估
print('rmse:')
print(mean_squared_error(testY6, y_pred6) ** 0.5)

import matplotlib.pyplot as plt  

testY6.reset_index(drop=True, inplace=True)

plt.plot(testY6,color="r",label="acc") 
 
plt.plot(y_pred6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

## lgb d G3
import json
import lightgbm as lgb
import pandas as pd
from sklearn.metrics import mean_squared_error



lgb_train = lgb.Dataset(trainXd, trainYd)
lgb_eval = lgb.Dataset(testXd, testYd, reference=lgb_train)

params = {
    'task': 'predict',
    'boosting_type': 'rf',
    'objective': 'rmse',
    'metric': {'l2', 'rmse'},
    'num_leaves': 100,
    'learning_rate': 0.01,
    'feature_fraction': 0.9,
    'bagging_fraction': 0.8,
    'bagging_freq': 10,
    'verbose': 0
}
print('...')
## train
gbm = lgb.train(params,
                lgb_train,
                num_boost_round=20,
                valid_sets=lgb_eval,
                early_stopping_rounds=5)
'''
## 保存模型
print('保存模型...')
## 保存模型到文件中
gbm.save_model('model.txt')
'''
print('predicting...')
## 预测
y_pred_d = gbm.predict(testXd, num_iteration=gbm.best_iteration)
## 评估
print('rmse:')
print(mean_squared_error(testYd, y_pred_d) ** 0.5)

import matplotlib.pyplot as plt  

testYd.reset_index(drop=True, inplace=True)

plt.plot(testYd,color="r",label="acc") 
 
plt.plot(y_pred_d,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

## lgb(add heart_rate and resp_rate) G4
import json
import lightgbm as lgb
import pandas as pd
from sklearn.metrics import mean_squared_error



lgb_train = lgb.Dataset(trainX_new, trainY_new)
lgb_eval = lgb.Dataset(testX_new, testY_new, reference=lgb_train)

params = {
    'task': 'predict',
    'boosting_type': 'rf',
    'objective': 'rmse',
    'metric': {'l2', 'rmse'},
    'num_leaves': 100,
    'learning_rate': 0.01,
    'feature_fraction': 0.9,
    'bagging_fraction': 0.8,
    'bagging_freq': 10,
    'verbose': 0
}
print('...')
## train
gbm = lgb.train(params,
                lgb_train,
                num_boost_round=20,
                valid_sets=lgb_eval,
                early_stopping_rounds=5)
'''
## 保存模型
print('保存模型...')
## 保存模型到文件中
gbm.save_model('model.txt')
'''
print('predicting...')
## 预测
y_pred = gbm.predict(testX_new, num_iteration=gbm.best_iteration)
## 评估
print('rmse:')
print(mean_squared_error(testY_new, y_pred) ** 0.5)

import matplotlib.pyplot as plt  

testY_new.reset_index(drop=True, inplace=True)

plt.plot(testY_new,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

## lgb(add heart_rate and resp_rate)  6 G5
import json
import lightgbm as lgb
import pandas as pd
from sklearn.metrics import mean_squared_error



lgb_train = lgb.Dataset(trainX_new6, trainY_new6)
lgb_eval = lgb.Dataset(testX_new6, testY_new6, reference=lgb_train)

params = {
    'task': 'predict',
    'boosting_type': 'rf',
    'objective': 'rmse',
    'metric': {'l2', 'rmse'},
    'num_leaves': 100,
    'learning_rate': 0.01,
    'feature_fraction': 0.9,
    'bagging_fraction': 0.8,
    'bagging_freq': 10,
    'verbose': 0
}
print('...')
## train
gbm = lgb.train(params,
                lgb_train,
                num_boost_round=20,
                valid_sets=lgb_eval,
                early_stopping_rounds=5)
'''
## 保存模型
print('保存模型...')
## 保存模型到文件中
gbm.save_model('model.txt')
'''
print('predicting...')
## 预测
y_pred6 = gbm.predict(testX_new6, num_iteration=gbm.best_iteration)
## 评估
print('rmse:')
print(mean_squared_error(testY_new6, y_pred6) ** 0.5)

import matplotlib.pyplot as plt  

testY_new6.reset_index(drop=True, inplace=True)

plt.plot(testY_new6,color="r",label="acc") 
 
plt.plot(y_pred6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

## lgb(add heart_rate and resp_rate) d G6
import json
import lightgbm as lgb
import pandas as pd
from sklearn.metrics import mean_squared_error



lgb_train = lgb.Dataset(trainX_newd, trainY_newd)
lgb_eval = lgb.Dataset(testX_newd, testY_newd, reference=lgb_train)

params = {
    'task': 'predict',
    'boosting_type': 'rf',
    'objective': 'rmse',
    'metric': {'l2', 'rmse'},
    'num_leaves': 100,
    'learning_rate': 0.01,
    'feature_fraction': 0.9,
    'bagging_fraction': 0.8,
    'bagging_freq': 10,
    'verbose': 0
}
print('...')
## train
gbm = lgb.train(params,
                lgb_train,
                num_boost_round=20,
                valid_sets=lgb_eval,
                early_stopping_rounds=5)
'''
## 保存模型
print('保存模型...')
## 保存模型到文件中
gbm.save_model('model.txt')
'''
print('predicting...')
## 预测
y_predd = gbm.predict(testX_newd, num_iteration=gbm.best_iteration)
## 评估
print('rmse:')
print(mean_squared_error(testY_newd, y_predd) ** 0.5)

import matplotlib.pyplot as plt  

testY_newd.reset_index(drop=True, inplace=True)

plt.plot(testY_newd,color="r",label="acc") 
 
plt.plot(y_predd,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

print(new_dynmaic.head())

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler

df = new_dynmaic.sort_values(by=['stay_id', 'time'])
import pandas as pd

col1 = df['stay_id']
col2 = df['time']

df = df.drop(['stay_id', 'time'], axis=1)







Xc1=df.columns

imputer = KNNImputer(n_neighbors=6, weights='uniform', metric='nan_euclidean')
#df=imputer.fit_transform(df)
df =df.fillna(df.mean())
df=pd.DataFrame(preprocessing.normalize(df))


df.columns=Xc1


df['stay_id'] = col1
df['time'] = col2


X = []
current_stay_id = None
current_sample = []
for index, row in df.iterrows():
    if current_stay_id is None:
        current_stay_id = row['stay_id']
    if row['stay_id'] != current_stay_id:
        X.append(current_sample)
        current_stay_id = row['stay_id']
        current_sample = []
    current_sample.append(row.drop(['stay_id', 'time']).values)
X.append(current_sample)



X = np.array(X)

import tensorflow as tf
max_length = max(len(x) for x in X)

# padding
X_padded = tf.keras.preprocessing.sequence.pad_sequences(
    X, maxlen=8, dtype='float32', padding='post', truncating='post', value=0.0
)

# print
print('oringinal：', X.shape)
print('Padding：', X_padded.shape)

Y_total=pd.read_csv(r"/content/sph_static_final.csv")
Y_total = Y_total.sort_values(by='stay_id')
print(Y_total.shape)
Y_total.head()

#define different Y_group
Yhr=Y_total['vent_duration']
Y6hr=Y_total['vent_duration_group_in_hours_3_day']
Ydy=Y_total['vent_duration_group_in_days']

X_train, X_test, y_train, y_test = train_test_split(X_padded, Yhr, test_size=0.2, random_state=3)
X_train6, X_test6, y_train6, y_test6 = train_test_split(X_padded, Y6hr, test_size=0.2, random_state=3)
X_traind, X_testd, y_traind, y_testd = train_test_split(X_padded, Ydy, test_size=0.2, random_state=3)

from keras.api._v2.keras import activations
# lstm in hourly prediction G!


import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from keras.callbacks import EarlyStopping
from sklearn.metrics import mean_squared_error
from keras.optimizers import RMSprop


from keras.utils import plot_model





model = Sequential()
model.add(LSTM(64, input_shape=(8, 12), return_sequences=True))
model.add(LSTM(32, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(1))

# Compile model
optimizer = RMSprop(learning_rate=0.01)
model.compile(loss='mse', optimizer=optimizer)

# Fit model with early stopping
early_stop = EarlyStopping(monitor='val_loss', patience=50, verbose=1)
history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test), verbose=2, callbacks=[early_stop])

# plot_model(model, to_file='lstm.png', show_shapes=True)

# Make predictions
y_pred = model.predict(X_test)


# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_test.reset_index(drop=True, inplace=True)

plt.plot(y_test,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

model.summary()

# lstm in 6-hourly prediction G2


import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from keras.callbacks import EarlyStopping
from sklearn.metrics import mean_squared_error







model = Sequential()
model.add(LSTM(64, input_shape=(8, 12), return_sequences=True))
model.add(LSTM(32, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(1))

# Compile model
model.compile(loss='mse', optimizer='RMSprop')



history = model.fit(X_train6, y_train6, epochs=50, batch_size=64, validation_data=(X_test6, y_test6), verbose=2)

# Make predictions
y_pred6 = model.predict(X_test)
y_pred6 = np.around(y_pred6)
y_pred6=np.clip(y_pred6,a_min=1,a_max=13)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test6, y_pred6))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_test6.reset_index(drop=True, inplace=True)

plt.plot(y_test6,color="r",label="acc") 
 
plt.plot(y_pred6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

model.summary()

# lstm in dayly prediction G3


import tensorflow as tf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from keras.callbacks import EarlyStopping
from sklearn.metrics import mean_squared_error








model = Sequential()
model.add(LSTM(64, input_shape=(8, 12), return_sequences=True))
model.add(LSTM(32, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(1))
# Compile model

model.compile(loss='mse', optimizer='RMSprop')

# Fit model with early stopping

history = model.fit(X_traind, y_traind, epochs=50, batch_size=32, validation_data=(X_testd, y_testd), verbose=2)

# Make predictions
y_predd = model.predict(X_testd)
y_predd = np.around(y_predd)
y_predd=np.clip(y_predd,a_min=1,a_max=4)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_testd, y_predd))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_testd.reset_index(drop=True, inplace=True)

plt.plot(y_testd,color="r",label="acc") 
 
plt.plot(y_predd,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

model.summary()

#CNN hoursly G1


import tensorflow as tf
from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Flatten, LSTM, Dense, Dropout

model = Sequential()

# Convolutional Layers
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(8, 12)))
model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.25))

# Flatten Layers
model.add(Flatten())

# Dense Layers
model.add(Dense(units=64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=1, activation='linear'))

# Compile the model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])



history = model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test), verbose=2)
y_pred=model.predict(X_test)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print('Test RMSE:', rmse)

plot_model(model, to_file='cnn.png', show_shapes=True)
import matplotlib.pyplot as plt  

y_test.reset_index(drop=True, inplace=True)

plt.plot(y_test,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

model.summary()

#CNN 6 hoursly G2
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Flatten, LSTM, Dense, Dropout

model = Sequential()

# Convolutional Layers
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(8, 12)))
model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.25))

# Flatten Layers
model.add(Flatten())

# Dense Layers
model.add(Dense(units=64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=1, activation='linear'))

# Compile the model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])



history = model.fit(X_train6, y_train6, epochs=50, batch_size=64, validation_data=(X_test6, y_test6), verbose=2)
y_predcnn6=model.predict(X_test6)
y_predcnn6=np.clip(y_predcnn6,a_min=1, a_max=13)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test6, y_predcnn6))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_test6.reset_index(drop=True, inplace=True)

plt.plot(y_test6,color="r",label="acc") 
 
plt.plot(y_predcnn6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

model.summary()

#CNN 6 hoursly G3
import tensorflow as tf
from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Flatten, LSTM, Dense, Dropout

model = Sequential()

# Convolutional Layers
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(8, 12)))
model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.25))

# Flatten Layers
model.add(Flatten())

# Dense Layers
model.add(Dense(units=64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=1, activation='linear'))

# Compile the model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])



history = model.fit(X_traind, y_traind, epochs=50, batch_size=64, validation_data=(X_testd, y_testd), verbose=2)
y_predcnnd=model.predict(X_testd)
y_predcnnd=np.clip(y_predcnnd,a_min=1, a_max=13)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_testd, y_predcnnd))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_testd.reset_index(drop=True, inplace=True)

plt.plot(y_testd,color="r",label="acc") 
 
plt.plot(y_predcnnd,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

model.summary()

#cnn-lstm hoursly G1
from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Flatten, LSTM, Dense, Dropout
from sklearn.metrics import mean_squared_error
model = Sequential()

# Convolutional Layers
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(8, 12)))
model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.25))

# LSTM Layer
model.add(LSTM(units=50, return_sequences=True))

# Flatten Layers
model.add(Flatten())

# Dense Layers
model.add(Dense(units=64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=1, activation='linear'))

# Compile the model
model.compile(optimizer='RMSprop', loss='mse', metrics=['mae'])

history = model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test), verbose=2)
y_pred=model.predict(X_test)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_test.reset_index(drop=True, inplace=True)

plt.plot(y_test,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()


# Print model summary
model.summary()

#cnn-lstm 6 hoursly G2
from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Flatten, LSTM, Dense, Dropout

model = Sequential()

# Convolutional Layers
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(8, 12)))
model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.25))

# LSTM Layer
model.add(LSTM(units=50, return_sequences=True))

# Flatten Layers
model.add(Flatten())

# Dense Layers
model.add(Dense(units=64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=1, activation='linear'))

# Compile the model
model.compile(optimizer='RMSprop', loss='mse', metrics=['mae'])

history = model.fit(X_train6, y_train6, epochs=50, batch_size=64, validation_data=(X_test6, y_test6), verbose=2)
y_predcnnlstm6=model.predict(X_test6)
y_predcnnlstm6=np.clip(y_predcnnlstm6,a_min=1,a_max=13)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test6, y_predcnnlstm6))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_test6.reset_index(drop=True, inplace=True)

plt.plot(y_test6,color="r",label="acc") 
 
plt.plot(y_predcnnlstm6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()


# Print model summary
model.summary()

#cnn-lstm 6 hoursly G3
from keras.models import Sequential
from keras.layers import Conv1D, MaxPooling1D, Flatten, LSTM, Dense, Dropout

model = Sequential()

# Convolutional Layers
model.add(Conv1D(filters=64, kernel_size=3, activation='relu', input_shape=(8, 12)))
model.add(Conv1D(filters=64, kernel_size=3, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Dropout(0.25))

# LSTM Layer
model.add(LSTM(units=50, return_sequences=True))

# Flatten Layers
model.add(Flatten())

# Dense Layers
model.add(Dense(units=64, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(units=1, activation='linear'))

# Compile the model
model.compile(optimizer='RMSprop', loss='mse', metrics=['mae'])

history = model.fit(X_traind, y_traind, epochs=50, batch_size=64, validation_data=(X_testd, y_testd), verbose=2)
y_predcnnlstmd=model.predict(X_testd)
y_predcnnlstmd=np.clip(y_predcnnlstmd,a_min=1,a_max=13)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_testd, y_predcnnlstmd))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_testd.reset_index(drop=True, inplace=True)

plt.plot(y_testd,color="r",label="acc") 
 
plt.plot(y_predcnnlstmd,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()


# Print model summary
model.summary()

#tcn hoursly G1

import tensorflow as tf
from keras.layers import Input, Dense, Conv1D, GlobalMaxPooling1D
from keras.optimizers import Adam
from keras.models import Model

from sklearn.model_selection import train_test_split
import numpy as np


input_layer = Input(shape=(8, 12))

# Temporal Convolutional Layer
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(input_layer)
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(x)
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(x)
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(x)


x = GlobalMaxPooling1D()(x)

output_layer = Dense(1)(x)


model = Model(input_layer, output_layer)


model.compile(optimizer=Adam(learning_rate=0.01), loss='mse')


history = model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))

y_predtcn=model.predict(X_test)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, y_predtcn))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_test.reset_index(drop=True, inplace=True)

plt.plot(y_test,color="r",label="acc") 
 
plt.plot(y_predtcn,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()


# Print model summary
model.summary()

#tcn 6-hoursly G2

import tensorflow as tf
from keras.layers import Input, Dense, Conv1D, GlobalMaxPooling1D
from keras.optimizers import Adam
from keras.models import Model

from sklearn.model_selection import train_test_split
import numpy as np


input_layer = Input(shape=(8, 12))

# Temporal Convolutional Layer
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(input_layer)
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(x)
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(x)
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(x)


x = GlobalMaxPooling1D()(x)

output_layer = Dense(1)(x)


model = Model(input_layer, output_layer)


model.compile(optimizer=Adam(learning_rate=0.001), loss='mse')


history = model.fit(X_train6, y_train6, epochs=50, batch_size=32, validation_data=(X_test6, y_test6))

y_predtcn6=model.predict(X_test6)
y_predtcn6=np.clip(y_predtcn6, a_min=1,a_max=13)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test6, y_predtcn6))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_test6.reset_index(drop=True, inplace=True)

plt.plot(y_test6,color="r",label="acc") 
 
plt.plot(y_predtcn6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()


# Print model summary
model.summary()

#tcn dayly G3

import tensorflow as tf
from keras.layers import Input, Dense, Conv1D, GlobalMaxPooling1D
from keras.optimizers import Adam
from keras.models import Model

from sklearn.model_selection import train_test_split
import numpy as np


input_layer = Input(shape=(8, 12))

# Temporal Convolutional Layer
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(input_layer)
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(x)
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(x)
x = Conv1D(64, kernel_size=2, activation='relu', padding='causal')(x)


x = GlobalMaxPooling1D()(x)

output_layer = Dense(1)(x)


model = Model(input_layer, output_layer)


model.compile(optimizer=Adam(learning_rate=0.001), loss='mse')


history = model.fit(X_traind, y_traind, epochs=50, batch_size=32, validation_data=(X_testd, y_testd))

y_predtcnd=model.predict(X_testd)
y_predtcnd=np.clip(y_predtcnd, a_min=1,a_max=4)
# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_testd, y_predtcnd))
print('Test RMSE:', rmse)


import matplotlib.pyplot as plt  

y_testd.reset_index(drop=True, inplace=True)

plt.plot(y_testd,color="r",label="acc") 
 
plt.plot(y_predtcnd,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()


# Print model summary
model.summary()

# Commented out IPython magic to ensure Python compatibility.
#fnn G1
import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
# %matplotlib inline
import sklearn
import os
import sys
import time
from tensorflow import keras

model = tf.keras.Sequential([tf.keras.layers.Dense(200, input_shape=(8,12), activation='relu'),
                             tf.keras.layers.Dense(100, activation='relu'),
                             tf.keras.layers.Dense(50, activation='relu'),
                             tf.keras.layers.Dense(25, activation='relu'),
                             tf.keras.layers.GlobalAveragePooling1D(),
                             tf.keras.layers.Dense(1)])

model.summary()
model.compile(optimizer='adam', loss='mse')
k = model.fit(X_train, y_train, epochs=50)
y_pred = model.predict(X_test)
print('rmse:')
print(mean_squared_error(y_test, y_pred) ** 0.5)

import matplotlib.pyplot as plt  

y_test.reset_index(drop=True, inplace=True)

plt.plot(y_test,color="r",label="acc") 
 
plt.plot(y_pred,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

# Commented out IPython magic to ensure Python compatibility.
#fcn G2
import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
# %matplotlib inline
import sklearn
import os
import sys
import time
from tensorflow import keras

model = tf.keras.Sequential([tf.keras.layers.Dense(200, input_shape=(8,12), activation='relu'),
                             tf.keras.layers.Dense(100, activation='relu'),
                             tf.keras.layers.Dense(50, activation='relu'),
                             tf.keras.layers.Dense(25, activation='relu'),
                              tf.keras.layers.GlobalAveragePooling1D(),
                             tf.keras.layers.Dense(1)])

model.summary()
model.compile(optimizer='adam', loss='mse')
k = model.fit(X_train6, y_train6, epochs=50)
y_pred6 = model.predict(X_test6)
print('rmse:')
print(mean_squared_error(y_test6, y_pred6) ** 0.5)

import matplotlib.pyplot as plt  

y_test6.reset_index(drop=True, inplace=True)

plt.plot(y_test6,color="r",label="acc") 
 
plt.plot(y_pred6,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()

# Commented out IPython magic to ensure Python compatibility.
#fcn G3
import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
# %matplotlib inline
import sklearn
import os
import sys
import time
from tensorflow import keras

model = tf.keras.Sequential([tf.keras.layers.Dense(200, input_shape=(8,12), activation='relu'),
                             tf.keras.layers.Dense(100, activation='relu'),
                             tf.keras.layers.Dense(50, activation='relu'),
                             tf.keras.layers.Dense(25, activation='relu'),
                              tf.keras.layers.GlobalAveragePooling1D(),
                             tf.keras.layers.Dense(1)])

model.summary()
model.compile(optimizer='adam', loss='mse')
k = model.fit(X_traind, y_traind, epochs=50)
y_predd = model.predict(X_testd)
y_predd=np.clip(y_predd,a_min=1,a_max=4)
print('rmse:')
print(mean_squared_error(y_testd, y_predd) ** 0.5)

import matplotlib.pyplot as plt  

y_testd.reset_index(drop=True, inplace=True)

plt.plot(y_testd,color="r",label="acc") 
 
plt.plot(y_predd,color=(0,0,0),label="pre") 
 
plt.xlabel("patient") 
 
plt.ylabel("vent_duration") 
 
plt.title("real value and predict value") 
 
plt.legend()
 
plt.show()